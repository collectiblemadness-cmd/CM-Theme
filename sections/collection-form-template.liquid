{% assign line_items = section.blocks | where: "type", "line_item_property" %}
<div class="collection-form-container card">
  
  <div class="collection__image-wrapper collection__image-wrapper--{{ section.settings.collection_image_size }}" style="background-image: url({{ collection.image | img_url: '1x1' }})">
     <div class="collection__image lazyload image--fade-in" data-bgset="{{ collection.image | img_url: '600x' }} 600w, {{ collection.image | img_url: '800x' }} 800w, {{ collection.image | img_url: '1000x' }} 1000w, {{ collection.image | img_url: '1200x' }} 1200w, {{ collection.image | img_url: '1500x' }} 1500w"></div>
  </div>
  <div class="collection__header-inner">
  	<div class="collection__meta">
  		<div class="collection__meta-inner">
        	<h1 class="collection__title heading h1">
              {%- if collection.handle == 'all' -%}
                 {{- 'collection.general.all_products' | t -}}
              {%- else -%}
                 {{- collection.title -}}
              {%- endif -%}
            </h1>

            <p class="collection__products-count text--small hidden-desk">{{ 'collection.general.products_count' | t: count: collection.all_products_count }}</p>
        </div>
  		{%- if collection.description != blank -%}
        {%- assign allow_collapse_description = false -%}
        {%- if section.settings.collapse_collection_description -%}
          {%- assign allow_collapse_description = true -%}
        {%- endif -%}

        <div class="collection__description {% if allow_collapse_description %}expandable-content{% endif %}" aria-expanded="false">
           <div class="rte">
              {{ collection.description }}
           </div>

           {%- if allow_collapse_description -%}
           <button class="expandable-content__toggle">
             <span class="expandable-content__toggle-icon"></span>
           	 <span class="expandable-content__toggle-text" data-view-more="{{ 'collection.general.view_more' | t | escape }}" data-view-less="{{ 'collection.general.view_less' | t | escape }}">{{- 'collection.general.view_more' | t -}}</span>
           </button>
           {%- endif -%}
        </div>
        {%- endif -%}
    </div>
  </div>
<!-- <div class="hc-collection-form-header">
  
  {% if section.settings.logo %}
  <div class="hc-collection-form-logo">
  	{{ section.settings.logo | image_url: 'master' | img_tag }}
  </div>
  {% endif %}
  
</div> -->

<form class="collection-form-form">
<table class="collection-form">
  <thead>
    <tr>
      <td></td>
      <td>
      	{{ section.settings.porduct_h }}
      </td>
      <td>
      	{{ section.settings.qty_h }}
      </td>
      {% for line_item in line_items %}
      <td>
      	{{ line_item.settings.name }}
      </td>
      {% endfor %}
      <td>
      	{{ section.settings.subtotal_h }}
      </td>
    </tr>
  </thead>
  <tbody class="collection-form-products">
  </tbody>
  <tfoot> 
  </tfoot>
</table>
</form>
  <div class="buttons-container">
<button class="button button--primary add-table-product">Add a new row</button>
<button class="button button--disabled button--primary submit-form-order" disabled>Make order</button>
  </div>

<script id="collection-form-product-template" type="html/template">
<table>
<tr class="product_template">
	<td>
    	<button class="collection-form-remove-item">Ã—</button>
    </td>
	<td>
    	<select required class="collection-form-product-selector">
        	<option>Select Product</option>
            {% assign products = collection.products | where: 'available', true %}
        	{% for product0 in products %}
            {% assign product = product0.first_available_variant %}
            <option value="{'id': '{{ product.id }}', 'price': {{ product.price }}, 'inventory': {{ product.inventory_quantity }} }">{{ product0.title }}</option>
            {% endfor %}
  		</select>
  	</td>
    <td class="collection-form-qty-cell">
    	<input type="number" required min="1" class="collection-form-qty" />
    </td>
    {% for line_item in line_items %}
    <td>
        <input type="text" required name="{{ line_item.settings.name }}" class="collection-form-line-item" />
    </td>
    {% endfor %}
    <td class="collection-form-price">
    </td>
</tr>
</table>
</script>

<script>
  window.addEventListener('DOMContentLoaded', function () {
    function checkValidity() {
      if (document.querySelector('.collection-form-form').checkValidity()) {
        document.querySelector('.submit-form-order').disabled = false;
        document.querySelector('.submit-form-order').classList.remove('button--disabled');
      } else {
        document.querySelector('.submit-form-order').disabled = true;
        document.querySelector('.submit-form-order').classList.add('button--disabled');
      }
  	}
    
    const domParser = new DOMParser();
    const textTemplate = document.querySelector('#collection-form-product-template').innerHTML;
    const parsed = domParser.parseFromString(textTemplate, "text/html");
    console.log(textTemplate, parsed);
    const productTemplate = parsed.querySelector('.product_template');
    console.log(productTemplate);
    let products = [];
    class ProductEntry {
      constructor() {
        this.props = {};
        this.product = productTemplate.cloneNode(true);
        this.productSelector = this.product.querySelector('.collection-form-product-selector');
        this.productSelector.addEventListener("change", () => {
          if (!this.productSelector.value) return;
          const product = JSON.parse(this.productSelector.value.replace(/\'/g, '"'));
          this.updateProduct(product);
        });
        this.productQtyInput = this.product.querySelector('.collection-form-qty');
        this.productQtyInput.addEventListener('input', (e) => {
          console.log('[HC] Changes qty');
          const qty = Number(e.target.value);
    	  this.updateQty(qty);
        })
        this.product.addEventListener('input', (e) => {
          console.log(e.target);
          if (e.target.matches('.collection-form-line-item')) {
            const name = e.target.getAttribute('name');
            console.log(name);
            const val = e.target.value;
            this.props[name] = val;
          }
        });
           
        this.productRemove = this.product.querySelector('.collection-form-remove-item');
    	this.productRemove.addEventListener('click', () => this.remove());
        this.priceContainer = this.product.querySelector('.collection-form-price');
        document.querySelector('.collection-form-products').append(this.product);
    	this.updateProduct(this.productSelector.value);
    	products.push(this);
    	checkValidity();
      }
      
      updateProduct(product) {
        this.maxQty = product.inventory;
        this.price = product.price;
        this.id = product.id;
        this.updateQty(this.qty);
      }
      updateQty(qty) {
        if (qty > this.maxQty) {
          this.qty = this.maxQty;
          this.productQtyInput.value = this.qty;
        } else {
          this.qty = qty
        }
        this.updatePrice();
      }
      updatePrice() {
        this.total = this.price * this.qty;
        this.priceContainer.innerHTML = (Shopify.formatMoney && Shopify.formatMoney(this.total)) || '$0'; 
      }
      remove() {
        this.product.remove();
        products = products.filter(i => i !== this);
        checkValidity();
  	  }
  	  get order() {
        return {
          id: this.id,
          quantity: this.qty,
          properties: this.props
        }
  	  }
    }
    document.querySelector('.add-table-product').addEventListener('click', function () {
      console.log('[HC] adding new product...');
      const product = new ProductEntry();
    });
  	document.querySelector('.submit-form-order').addEventListener('click', function () {
      const data = products.map(p => p.order);
      console.log(products, {items: data});
      fetch('/cart/add.js', {
        method: 'POST',
        body: JSON.stringify({items: data}),
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(res => res.json())
      .then(data => {
        window.location.href = '/cart';
      });
  	});
  	new ProductEntry();
  	
  	document.querySelector('.collection-form-form').addEventListener('input', checkValidity);
  });
  
</script>
</div>
{% schema %}
  {
    "name": "Order form",
    "settings": [
		{
      		"type": "checkbox",
      		"id": "collapse_collection_description",
      		"label": "Collapse long description",
      		"default": false
    	},
		{
			"type": "text",
			"id": "porduct_h",
			"label": "Product header",
			"default": "Service Level"
		},
		{
			"type": "text",
			"id": "qty_h",
			"label": "Qty header",
			"default": "Qty"
		},
		{
			"type": "text",
			"id": "subtotal_h",
			"label": "Total price header",
			"default": "Invoice Value"
		}
	],
	"blocks": [
		{
			"type": "line_item_property",
			"name": "Product property",
			"settings": [
				{
					"type": "text",
					"id": "name",
					"label": "Name"
				}
			]
		}
	],
    "presets": [
      {
        "category": "Collection",
        "name": "Custom collection form",
        "blocks": []
      }
    ]
  }
{% endschema %}

{% style %}
.collection-form tr > td {
    //max-width: 40px;
}
{% endstyle %}

{% javascript %}
{% endjavascript %}
