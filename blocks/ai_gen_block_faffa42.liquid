{% doc %}
  @prompt
    Create a hover tilt effect for slideshow slides that makes the slide slightly tilt in the direction of the mouse cursor when hovered over

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-tilt-slideshow-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
    background-color: {{ block.settings.background_color }};
  }

  .ai-tilt-slideshow__slides-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.5s ease;
  }

  .ai-tilt-slideshow__slide-{{ ai_gen_id }} {
    flex: 0 0 100%;
    position: relative;
    overflow: hidden;
    perspective: 1000px;
  }

  .ai-tilt-slideshow__slide-inner-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: 100%;
    transition: transform 0.2s ease-out;
    transform-style: preserve-3d;
  }

  .ai-tilt-slideshow__image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    padding-bottom: {{ block.settings.aspect_ratio }}%;
    overflow: hidden;
  }

  .ai-tilt-slideshow__image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-tilt-slideshow__placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;
  }

  .ai-tilt-slideshow__placeholder-{{ ai_gen_id }} svg {
    width: 100%;
    height: 100%;
    max-width: 500px;
    max-height: 500px;
  }

  .ai-tilt-slideshow__caption-{{ ai_gen_id }} {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    padding: 20px;
    background-color: {{ block.settings.caption_background }};
    color: {{ block.settings.caption_color }};
    opacity: {{ block.settings.caption_opacity }};
    transform: translateZ(20px);
  }

  .ai-tilt-slideshow__controls-{{ ai_gen_id }} {
    position: absolute;
    bottom: {{ block.settings.controls_position }}%;
    left: 0;
    width: 100%;
    display: flex;
    justify-content: center;
    gap: 10px;
    z-index: 2;
  }

  .ai-tilt-slideshow__dot-{{ ai_gen_id }} {
    width: {{ block.settings.dot_size }}px;
    height: {{ block.settings.dot_size }}px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    opacity: 0.5;
    cursor: pointer;
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .ai-tilt-slideshow__dot-{{ ai_gen_id }}.active {
    opacity: 1;
    transform: scale(1.2);
  }

  .ai-tilt-slideshow__arrow-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 40px;
    height: 40px;
    background-color: {{ block.settings.arrow_background }};
    color: {{ block.settings.arrow_color }};
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 2;
    opacity: {{ block.settings.arrow_opacity }};
    transition: opacity 0.3s ease, background-color 0.3s ease;
  }

  .ai-tilt-slideshow__arrow-{{ ai_gen_id }}:hover {
    opacity: 1;
    background-color: {{ block.settings.arrow_hover_background }};
  }

  .ai-tilt-slideshow__arrow-prev-{{ ai_gen_id }} {
    left: 20px;
  }

  .ai-tilt-slideshow__arrow-next-{{ ai_gen_id }} {
    right: 20px;
  }

  @media screen and (max-width: 749px) {
    .ai-tilt-slideshow__arrow-{{ ai_gen_id }} {
      width: 30px;
      height: 30px;
    }
  }
{% endstyle %}

<tilt-slideshow-{{ ai_gen_id }} 
  class="ai-tilt-slideshow-{{ ai_gen_id }}"
  data-autoplay="{{ block.settings.autoplay }}"
  data-autoplay-speed="{{ block.settings.autoplay_speed | times: 1000 }}"
  data-tilt-max="{{ block.settings.tilt_intensity }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-tilt-slideshow__slides-{{ ai_gen_id }}">
    {% for i in (1..5) %}
      {% assign image_setting = 'image_' | append: i %}
      {% assign caption_setting = 'caption_' | append: i %}
      {% assign image = block.settings[image_setting] %}
      {% assign caption = block.settings[caption_setting] %}

      {% if image != blank or forloop.index == 1 %}
        <div class="ai-tilt-slideshow__slide-{{ ai_gen_id }}" data-slide-index="{{ forloop.index0 }}">
          <div class="ai-tilt-slideshow__slide-inner-{{ ai_gen_id }}">
            <div class="ai-tilt-slideshow__image-wrapper-{{ ai_gen_id }}">
              {% if image != blank %}
                <img
                  src="{{ image | image_url: width: 1500 }}"
                  alt="{{ image.alt | escape }}"
                  loading="lazy"
                  class="ai-tilt-slideshow__image-{{ ai_gen_id }}"
                >
              {% else %}
                <div class="ai-tilt-slideshow__placeholder-{{ ai_gen_id }}">
                  {{ 'image' | placeholder_svg_tag }}
                </div>
              {% endif %}
            </div>
            
            {% if caption != blank %}
              <div class="ai-tilt-slideshow__caption-{{ ai_gen_id }}">
                {{ caption }}
              </div>
            {% endif %}
          </div>
        </div>
      {% endif %}
    {% endfor %}
  </div>

  {% if block.settings.show_arrows %}
    <button class="ai-tilt-slideshow__arrow-{{ ai_gen_id }} ai-tilt-slideshow__arrow-prev-{{ ai_gen_id }}" aria-label="Previous slide">
      <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M15 6L9 12L15 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
    <button class="ai-tilt-slideshow__arrow-{{ ai_gen_id }} ai-tilt-slideshow__arrow-next-{{ ai_gen_id }}" aria-label="Next slide">
      <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M9 6L15 12L9 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  {% endif %}

  {% if block.settings.show_dots %}
    <div class="ai-tilt-slideshow__controls-{{ ai_gen_id }}">
      {% for i in (1..5) %}
        {% assign image_setting = 'image_' | append: i %}
        {% if block.settings[image_setting] != blank or forloop.index == 1 %}
          <div class="ai-tilt-slideshow__dot-{{ ai_gen_id }} {% if forloop.index == 1 %}active{% endif %}" data-slide-index="{{ forloop.index0 }}" aria-label="Go to slide {{ forloop.index }}"></div>
        {% endif %}
      {% endfor %}
    </div>
  {% endif %}
</tilt-slideshow-{{ ai_gen_id }}>

<script>
  (function() {
    class TiltSlideshow extends HTMLElement {
      constructor() {
        super();
        this.slides = this.querySelectorAll(`.ai-tilt-slideshow__slide-{{ ai_gen_id }}`);
        this.slideCount = this.slides.length;
        this.currentSlide = 0;
        this.slidesContainer = this.querySelector(`.ai-tilt-slideshow__slides-{{ ai_gen_id }}`);
        this.dots = this.querySelectorAll(`.ai-tilt-slideshow__dot-{{ ai_gen_id }}`);
        this.prevButton = this.querySelector(`.ai-tilt-slideshow__arrow-prev-{{ ai_gen_id }}`);
        this.nextButton = this.querySelector(`.ai-tilt-slideshow__arrow-next-{{ ai_gen_id }}`);
        this.autoplay = this.dataset.autoplay === 'true';
        this.autoplaySpeed = parseInt(this.dataset.autoplaySpeed) || 5000;
        this.autoplayInterval = null;
        this.tiltMax = parseFloat(this.dataset.tiltMax) || 10;
        this.slideInnerElements = this.querySelectorAll(`.ai-tilt-slideshow__slide-inner-{{ ai_gen_id }}`);
        
        this.isTransitioning = false;
      }

      connectedCallback() {
        if (this.slideCount <= 1) return;
        
        this.setupEventListeners();
        
        if (this.autoplay) {
          this.startAutoplay();
        }
      }

      disconnectedCallback() {
        if (this.autoplayInterval) {
          clearInterval(this.autoplayInterval);
        }
      }

      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.goToSlide(this.currentSlide - 1));
        }
        
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.goToSlide(this.currentSlide + 1));
        }
        
        this.dots.forEach(dot => {
          dot.addEventListener('click', () => {
            const slideIndex = parseInt(dot.dataset.slideIndex);
            this.goToSlide(slideIndex);
          });
        });
        
        // Add tilt effect on mouse move
        this.slideInnerElements.forEach(slideInner => {
          slideInner.addEventListener('mousemove', e => this.handleTilt(e, slideInner));
          slideInner.addEventListener('mouseleave', () => this.resetTilt(slideInner));
          slideInner.addEventListener('mouseenter', () => {
            if (this.autoplay) {
              clearInterval(this.autoplayInterval);
            }
          });
          slideInner.addEventListener('mouseleave', () => {
            if (this.autoplay) {
              this.startAutoplay();
            }
          });
        });
      }

      handleTilt(e, element) {
        const rect = element.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        // Calculate percentage position
        const xPercent = x / rect.width;
        const yPercent = y / rect.height;
        
        // Calculate tilt values (transform from 0-1 to -max to +max)
        const tiltX = (yPercent - 0.5) * this.tiltMax * -1; // Invert Y axis for natural feel
        const tiltY = (xPercent - 0.5) * this.tiltMax;
        
        // Apply tilt transform
        element.style.transform = `perspective(1000px) rotateX(${tiltX}deg) rotateY(${tiltY}deg)`;
      }

      resetTilt(element) {
        element.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg)';
      }

      startAutoplay() {
        this.autoplayInterval = setInterval(() => {
          this.goToSlide(this.currentSlide + 1);
        }, this.autoplaySpeed);
      }

      goToSlide(index) {
        if (this.isTransitioning) return;
        
        this.isTransitioning = true;
        setTimeout(() => {
          this.isTransitioning = false;
        }, 500); // Match transition duration
        
        // Handle wrapping
        if (index < 0) {
          index = this.slideCount - 1;
        } else if (index >= this.slideCount) {
          index = 0;
        }
        
        // Update current slide
        this.currentSlide = index;
        
        // Update slides position
        this.slidesContainer.style.transform = `translateX(-${this.currentSlide * 100}%)`;
        
        // Update dots
        this.dots.forEach((dot, i) => {
          if (i === this.currentSlide) {
            dot.classList.add('active');
          } else {
            dot.classList.remove('active');
          }
        });
      }
    }

    customElements.define('tilt-slideshow-{{ ai_gen_id }}', TiltSlideshow);
  })();
</script>

{% schema %}
{
  "name": "Tilt Effect Slideshow",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Slideshow Images"
    },
    {
      "type": "image_picker",
      "id": "image_1",
      "label": "Image 1"
    },
    {
      "type": "richtext",
      "id": "caption_1",
      "label": "Caption 1",
      "default": "<p>Add your caption here</p>"
    },
    {
      "type": "image_picker",
      "id": "image_2",
      "label": "Image 2"
    },
    {
      "type": "richtext",
      "id": "caption_2",
      "label": "Caption 2"
    },
    {
      "type": "image_picker",
      "id": "image_3",
      "label": "Image 3"
    },
    {
      "type": "richtext",
      "id": "caption_3",
      "label": "Caption 3"
    },
    {
      "type": "image_picker",
      "id": "image_4",
      "label": "Image 4"
    },
    {
      "type": "richtext",
      "id": "caption_4",
      "label": "Caption 4"
    },
    {
      "type": "image_picker",
      "id": "image_5",
      "label": "Image 5"
    },
    {
      "type": "richtext",
      "id": "caption_5",
      "label": "Caption 5"
    },
    {
      "type": "header",
      "content": "Tilt Effect Settings"
    },
    {
      "type": "range",
      "id": "tilt_intensity",
      "min": 5,
      "max": 20,
      "step": 1,
      "unit": "°",
      "label": "Tilt intensity",
      "default": 10
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "aspect_ratio",
      "min": 30,
      "max": 100,
      "step": 5,
      "unit": "%",
      "label": "Image aspect ratio",
      "default": 60
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Caption"
    },
    {
      "type": "color",
      "id": "caption_background",
      "label": "Caption background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "caption_color",
      "label": "Caption text color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "caption_opacity",
      "min": 0.1,
      "max": 1.0,
      "step": 0.1,
      "label": "Caption opacity",
      "default": 0.7
    },
    {
      "type": "header",
      "content": "Controls"
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show arrows",
      "default": true
    },
    {
      "type": "color",
      "id": "arrow_color",
      "label": "Arrow color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "arrow_background",
      "label": "Arrow background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "arrow_hover_background",
      "label": "Arrow hover background",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "arrow_opacity",
      "min": 0.1,
      "max": 1.0,
      "step": 0.1,
      "label": "Arrow opacity",
      "default": 0.7
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dots",
      "default": true
    },
    {
      "type": "range",
      "id": "dot_size",
      "min": 6,
      "max": 14,
      "step": 1,
      "unit": "px",
      "label": "Dot size",
      "default": 8
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "controls_position",
      "min": 5,
      "max": 20,
      "step": 1,
      "unit": "%",
      "label": "Controls position from bottom",
      "default": 10
    },
    {
      "type": "header",
      "content": "Autoplay"
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Enable autoplay",
      "default": true
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Change slides every",
      "default": 5
    }
  ],
  "presets": [
    {
      "name": "Tilt Effect Slideshow"
    }
  ]
}
{% endschema %}